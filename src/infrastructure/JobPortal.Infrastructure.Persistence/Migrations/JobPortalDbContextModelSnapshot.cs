// <auto-generated />
using System;
using JobPortal.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobPortal.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(JobPortalDbContext))]
    partial class JobPortalDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_application_id");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("applicant_id");

                    b.Property<Guid>("ApplicantResumeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("applicant_resume_id");

                    b.Property<string>("CoverLetter")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("cover_letter");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid>("JobPostingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_posting_id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ApplicantResumeId");

                    b.HasIndex("JobPostingId");

                    b.ToTable("job_application", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobBenefit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_benefit_id");

                    b.Property<string>("Benefit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("benefit");

                    b.Property<Guid>("JobPostingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_posting_id");

                    b.HasKey("Id");

                    b.HasIndex("JobPostingId");

                    b.ToTable("job_benefit", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_location_id");

                    b.Property<Guid>("CompanyLocationId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("company_location_id");

                    b.Property<Guid>("JobPostingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_posting_id");

                    b.HasKey("Id");

                    b.HasIndex("CompanyLocationId");

                    b.HasIndex("JobPostingId");

                    b.ToTable("job_location", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobPosting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_posting_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTimeOffset>("ExpiryDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("expiry_date");

                    b.Property<int>("JobLevel")
                        .HasColumnType("int")
                        .HasColumnName("job_level");

                    b.Property<int>("JobType")
                        .HasColumnType("int")
                        .HasColumnName("job_type");

                    b.Property<int>("MaxSalary")
                        .HasColumnType("int")
                        .HasColumnName("max_salary");

                    b.Property<int>("MinSalary")
                        .HasColumnType("int")
                        .HasColumnName("min_salary");

                    b.Property<int>("NumberOfHires")
                        .HasColumnType("int")
                        .HasColumnName("number_of_hires");

                    b.Property<DateTimeOffset>("PostedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("posted_at");

                    b.Property<int>("SalaryType")
                        .HasColumnType("int")
                        .HasColumnName("salary_type");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("job_posting", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_requirement_id");

                    b.Property<Guid>("JobPostingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_posting_id");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("requirement");

                    b.HasKey("Id");

                    b.HasIndex("JobPostingId");

                    b.ToTable("job_requirement", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_skill_id");

                    b.Property<Guid>("JobPostingId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("job_posting_id");

                    b.Property<Guid>("WorkingSkillId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("working_skill_id");

                    b.HasKey("Id");

                    b.HasIndex("JobPostingId");

                    b.HasIndex("WorkingSkillId");

                    b.ToTable("job_skill", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Applicants.Applicant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("applicant_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("applicant", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Applicants.ApplicantResume", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("resume_id");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("applicant_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("created_at");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_name");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("file_url");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.ToTable("applicant_resume", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Applicants.ApplicantSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("applicant_skill_id");

                    b.Property<Guid>("ApplicantId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("applicant_id");

                    b.Property<Guid>("WorkingSkillId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("working_skill_id");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("WorkingSkillId");

                    b.ToTable("applicant_skill", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Companies.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("company_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("website_url");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("company", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Companies.CompanyLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("company_location_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("city");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("company_id");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("country");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("district");

                    b.Property<bool>("IsHeadquarter")
                        .HasColumnType("bit")
                        .HasColumnName("is_headquarter");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude");

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("company_location", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Recruiters.Recruiter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("recruiter_id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("account_id");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("company_id");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.ToTable("recruiter", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.WorkingSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("working_skill_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("working_skill", (string)null);
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobApplication", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Users.Applicants.Applicant", "Applicant")
                        .WithMany("JobApplications")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobPortal.Domain.Entities.Users.Applicants.ApplicantResume", "ApplicantResume")
                        .WithMany("JobApplications")
                        .HasForeignKey("ApplicantResumeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobPortal.Domain.Entities.Jobs.JobPosting", "JobPosting")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("ApplicantResume");

                    b.Navigation("JobPosting");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobBenefit", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Jobs.JobPosting", "JobPosting")
                        .WithMany("JobBenefits")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobPosting");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobLocation", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Users.Companies.CompanyLocation", "CompanyLocation")
                        .WithMany("JobLocations")
                        .HasForeignKey("CompanyLocationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobPortal.Domain.Entities.Jobs.JobPosting", "JobPosting")
                        .WithMany("JobLocations")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyLocation");

                    b.Navigation("JobPosting");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobPosting", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Users.Recruiters.Recruiter", "CreatedBy")
                        .WithMany("JobPostings")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobRequirement", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Jobs.JobPosting", "JobPosting")
                        .WithMany("JobRequirements")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobPosting");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobSkill", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Jobs.JobPosting", "JobPosting")
                        .WithMany("JobSkills")
                        .HasForeignKey("JobPostingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobPortal.Domain.Entities.WorkingSkill", "WorkingSkill")
                        .WithMany("JobSkills")
                        .HasForeignKey("WorkingSkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("JobPosting");

                    b.Navigation("WorkingSkill");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Account", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Users.Account", "CreatedBy")
                        .WithMany("CreatedAccounts")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_account_created_by_id");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Applicants.Applicant", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Users.Account", "Account")
                        .WithOne("Applicant")
                        .HasForeignKey("JobPortal.Domain.Entities.Users.Applicants.Applicant", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_applicant_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Applicants.ApplicantResume", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Users.Applicants.Applicant", "Applicant")
                        .WithMany("ApplicantResumes")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_applicant_resume_applicant_id");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Applicants.ApplicantSkill", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Users.Applicants.Applicant", "Applicant")
                        .WithMany("ApplicantSkills")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("JobPortal.Domain.Entities.WorkingSkill", "WorkingSkill")
                        .WithMany("ApplicantSkills")
                        .HasForeignKey("WorkingSkillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Applicant");

                    b.Navigation("WorkingSkill");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Companies.Company", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Users.Account", "Account")
                        .WithOne("Company")
                        .HasForeignKey("JobPortal.Domain.Entities.Users.Companies.Company", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_company_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Companies.CompanyLocation", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Users.Companies.Company", "Company")
                        .WithMany("CompanyLocations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_company_location_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Recruiters.Recruiter", b =>
                {
                    b.HasOne("JobPortal.Domain.Entities.Users.Account", "Account")
                        .WithOne("Recruiter")
                        .HasForeignKey("JobPortal.Domain.Entities.Users.Recruiters.Recruiter", "AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_recruiter_account_id");

                    b.HasOne("JobPortal.Domain.Entities.Users.Companies.Company", "Company")
                        .WithMany("Recruiters")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_recruiter_company_id");

                    b.Navigation("Account");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Jobs.JobPosting", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("JobBenefits");

                    b.Navigation("JobLocations");

                    b.Navigation("JobRequirements");

                    b.Navigation("JobSkills");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Account", b =>
                {
                    b.Navigation("Applicant");

                    b.Navigation("Company");

                    b.Navigation("CreatedAccounts");

                    b.Navigation("Recruiter");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Applicants.Applicant", b =>
                {
                    b.Navigation("ApplicantResumes");

                    b.Navigation("ApplicantSkills");

                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Applicants.ApplicantResume", b =>
                {
                    b.Navigation("JobApplications");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Companies.Company", b =>
                {
                    b.Navigation("CompanyLocations");

                    b.Navigation("Recruiters");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Companies.CompanyLocation", b =>
                {
                    b.Navigation("JobLocations");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.Users.Recruiters.Recruiter", b =>
                {
                    b.Navigation("JobPostings");
                });

            modelBuilder.Entity("JobPortal.Domain.Entities.WorkingSkill", b =>
                {
                    b.Navigation("ApplicantSkills");

                    b.Navigation("JobSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
